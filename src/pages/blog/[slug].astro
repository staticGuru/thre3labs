---
import { getCollection } from "astro:content";
import Layout from "@layouts/Layout.astro";
import Container from "@components/container.astro";
import { getPosts } from "data/api";
import { formatDate } from "@utils/all";

// Generate a new path for every collection entry
const { slug } = Astro.params;
export const prerender = true;
export async function getStaticPaths() {
  let posts = await getPosts();

  function getTags(data) {
    if(!data) return [];
    const tags = data?.map((item) => item?.name || "tags");
    return tags;
  }
  function getCategoryTitle(data) {
    if(!data) return "";
    return data?.[0]?.name;
  }
  return posts?.map((post) => {
    return {
      params: { slug: post.slug },
      props: {
        title: post?.title?.rendered,
        content: post?.content?.rendered,
        category: getCategoryTitle(post?._embedded?.["wp:term"]?.["0"]),
        author: post?._embedded?.["author"]?.["0"]?.name,
        tags: getTags(post?._embedded?.["wp:term"]?.["1"]),
        date: formatDate(post?.date),
        image: post?._embedded?.["wp:featuredmedia"]?.["0"]?.source_url,

        // Spreading the Custom Fields into a meta object
        meta: {
          ...post?.acf,
        },
      },
    };
  });
}

// Get the entry directly from the prop on render
const {
  title = "",
  content = "",
  author = "",
  category = "",
  date = "",
  tags = [],
  image = "",
  meta = "",
} = Astro.props;
---

<Layout title={title}>
  <Container>
    <div class="mx-auto max-w-[735px] mt-14">
      <span class="text-blue-400 uppercase tracking-wider text-sm font-medium">
        {category}
      </span>
      <h1
        class="text-4xl lg:text-5xl font-bold lg:tracking-tight mt-1 lg:leading-tight">
        {title}
      </h1>
      <div class="flex gap-2 mt-3 items-center flex-wrap md:flex-nowrap">
        <span class="text-gray-400">
          {author}
        </span>
        <span class="text-gray-400">•</span>
        <time class="text-gray-400" datetime={date}>
          {date}
        </time>
        {
          tags?.length ? (
            <span class="text-gray-400 hidden md:block">•</span>
          ) : null
        }
        <div class="w-full md:w-auto flex flex-wrap gap-3">
          {
            tags?.map((tag) => (
              <span class="text-sm text-gray-500">#{tag}</span>
            ))
          }
        </div>
      </div>
    </div>

    <div class="mx-auto prose prose-lg mt-6">
      <Fragment set:html={content} />
    </div>
    <div class="text-center mt-8">
      <a
        href="/blog"
        class="bg-gray-100 px-5 py-3 rounded-md hover:bg-gray-200 transition"
        >← Back to Blog</a
      >
    </div>
  </Container>
</Layout>
